package layers

import (
	"fmt"
	"io"
	"testing"

	"github.com/stretchr/testify/require"
)

func BenchmarkParseHTTP(b *testing.B) {
	packet, close := testPacketBench(b, "http")
	defer close()
	b.ResetTimer()
	http := &HTTPMessage{}
	for i := 0; i < b.N; i++ {
		_ = http.Parse(packet)
		fmt.Fprint(io.Discard, http.String())
	}
}

func TestParseHTTP(t *testing.T) {
	expected := &HTTPMessage{
		summary: []byte{
			0x50, 0x4f, 0x53, 0x54, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x20,
			0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x20, 0x68,
			0x6f, 0x73, 0x74, 0x3a, 0x20, 0x31, 0x34, 0x39, 0x2e, 0x31,
			0x35, 0x34, 0x2e, 0x31, 0x36, 0x37, 0x2e, 0x32, 0x32, 0x32,
			0x3a, 0x38, 0x30,
		},
		data: []byte{

			0x2d, 0x20, 0x50, 0x4f, 0x53, 0x54, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x20, 0x48, 0x54, 0x54, 0x50,
			0x2f, 0x31, 0x2e, 0x31, 0x0a, 0x2d, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x31, 0x34, 0x39,
			0x2e, 0x31, 0x35, 0x34, 0x2e, 0x31, 0x36, 0x37, 0x2e, 0x32, 0x32, 0x32, 0x3a, 0x38, 0x30, 0x0a,
			0x2d, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
			0x3a, 0x20, 0x32, 0x31, 0x32, 0x0a, 0x2d, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d,
			0x74, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
			0x6e, 0x2f, 0x78, 0x2d, 0x77, 0x77, 0x77, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x75, 0x72, 0x6c,
			0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x0a, 0x2d, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
			0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x4b, 0x65, 0x65, 0x70, 0x2d, 0x41, 0x6c, 0x69, 0x76, 0x65,
			0x0a, 0x2d, 0x20, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
			0x6e, 0x67, 0x3a, 0x20, 0x67, 0x7a, 0x69, 0x70, 0x2c, 0x20, 0x64, 0x65, 0x66, 0x6c, 0x61, 0x74,
			0x65, 0x0a, 0x2d, 0x20, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x6c, 0x61, 0x6e, 0x67, 0x75,
			0x61, 0x67, 0x65, 0x3a, 0x20, 0x65, 0x6e, 0x2d, 0x55, 0x53, 0x2c, 0x2a, 0x0a, 0x2d, 0x20, 0x75,
			0x73, 0x65, 0x72, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x4d, 0x6f, 0x7a, 0x69, 0x6c,
			0x6c, 0x61, 0x2f, 0x35, 0x2e, 0x30,
		},
	}
	http := &HTTPMessage{}
	packet, close := testPacket(t, "http")
	defer close()
	if err := http.Parse(packet); err != nil {
		t.Fatal(err)
	}
	require.Equal(t, expected, http)
}
