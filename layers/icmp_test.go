package layers

import (
	"fmt"
	"io"
	"testing"

	"github.com/stretchr/testify/require"
)

func BenchmarkParseICMP(b *testing.B) {
	packet, close := testPacketBench(b, "icmp")
	defer close()
	b.ResetTimer()
	icmp := &ICMPSegment{}
	for i := 0; i < b.N; i++ {
		_ = icmp.Parse(packet)
		fmt.Fprint(io.Discard, icmp.String())
	}
}

func TestParseICMP(t *testing.T) {
	expected := &ICMPSegment{
		Type:     8,
		TypeDesc: "Echo Request",
		Code:     0,
		CodeDesc: "Echo Request (Ping)",
		Checksum: 9604,
		Data: []byte{
			0x00, 0x02, 0x00, 0x01, 0x70, 0x2A, 0xE5, 0x66, 0x00, 0x00, 0x00, 0x00,
			0xB0, 0x14, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x12, 0x13,
			0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
			0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B,
			0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37},
	}
	icmp := &ICMPSegment{}
	packet, close := testPacket(t, "icmp")
	defer close()
	if err := icmp.Parse(packet); err != nil {
		t.Fatal(err)
	}
	require.Equal(t, expected, icmp)
}
