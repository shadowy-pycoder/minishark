package layers

import (
	"fmt"
	"io"
	"testing"

	"github.com/stretchr/testify/require"
)

func BenchmarkParseFTP(b *testing.B) {
	packet, close := testPacketBench(b, "ftp")
	defer close()
	b.ResetTimer()
	ftp := &FTPMessage{}
	for i := 0; i < b.N; i++ {
		_ = ftp.Parse(packet)
		fmt.Fprint(io.Discard, ftp.String())
	}
}

func TestParseFTP(t *testing.T) {
	expected := &FTPMessage{
		summary: []byte{
			0x32, 0x31, 0x31, 0x2d, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
			0x74, 0x65, 0x64, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
			0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x20, 0x41, 0x55, 0x54,
			0x48, 0x20, 0x54, 0x4c, 0x53, 0x3b, 0x53, 0x53, 0x4c, 0x3b},
		data: []byte{
			0x2d, 0x20, 0x32, 0x31, 0x31, 0x2d, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20,
			0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x0a, 0x2d, 0x20, 0x20, 0x41,
			0x55, 0x54, 0x48, 0x20, 0x54, 0x4c, 0x53, 0x3b, 0x53, 0x53, 0x4c, 0x3b, 0x0a, 0x2d, 0x20, 0x20,
			0x43, 0x44, 0x55, 0x50, 0x0a, 0x2d, 0x20, 0x20, 0x43, 0x4c, 0x4e, 0x54, 0x0a, 0x2d, 0x20, 0x20,
			0x43, 0x53, 0x49, 0x44, 0x0a, 0x2d, 0x20, 0x20, 0x45, 0x50, 0x53, 0x56, 0x0a, 0x2d, 0x20, 0x20,
			0x45, 0x50, 0x52, 0x54, 0x0a, 0x2d, 0x20, 0x20, 0x4d, 0x44, 0x54, 0x4d, 0x0a, 0x2d, 0x20, 0x20,
			0x4d, 0x46, 0x4d, 0x54, 0x0a, 0x2d, 0x20, 0x20, 0x4d, 0x4c, 0x53, 0x54, 0x20, 0x54, 0x79, 0x70,
			0x65, 0x2a, 0x3b, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x2a, 0x3b, 0x43, 0x72, 0x65, 0x61, 0x74,
			0x65, 0x2a, 0x3b, 0x57, 0x69, 0x6e, 0x33, 0x32, 0x2e, 0x65, 0x61, 0x3b, 0x53, 0x69, 0x7a, 0x65,
			0x2a, 0x3b, 0x0a, 0x2d, 0x20, 0x20, 0x50, 0x41, 0x53, 0x56, 0x0a, 0x2d, 0x20, 0x20, 0x50, 0x42,
			0x53, 0x5a, 0x0a, 0x2d, 0x20, 0x20, 0x50, 0x4f, 0x52, 0x54, 0x0a, 0x2d, 0x20, 0x20, 0x50, 0x52,
			0x4f, 0x54, 0x20, 0x43, 0x3b, 0x50, 0x3b, 0x0a, 0x2d, 0x20, 0x20, 0x52, 0x45, 0x53, 0x54, 0x20,
			0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x0a, 0x2d, 0x20, 0x20, 0x53, 0x49, 0x5a, 0x45, 0x0a, 0x2d,
			0x20, 0x20, 0x54, 0x56, 0x46, 0x53, 0x0a, 0x2d, 0x20, 0x20, 0x55, 0x54, 0x46, 0x38, 0x0a, 0x2d,
			0x20, 0x32, 0x31, 0x31, 0x20, 0x45, 0x6e, 0x64, 0x2e},
	}
	ftp := &FTPMessage{}
	packet, close := testPacket(t, "ftp")
	defer close()
	if err := ftp.Parse(packet); err != nil {
		t.Fatal(err)
	}
	require.Equal(t, expected, ftp)
}
