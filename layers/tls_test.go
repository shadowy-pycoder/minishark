package layers

import (
	"fmt"
	"io"
	"testing"

	"github.com/stretchr/testify/require"
)

func BenchmarkParseTLS(b *testing.B) {
	packet, close := testPacketBench(b, "tls")
	defer close()
	b.ResetTimer()
	tls := &TLSMessage{}
	for i := 0; i < b.N; i++ {
		_ = tls.Parse(packet)
		fmt.Fprint(io.Discard, tls.String())
	}
}

func TestParseTLS(t *testing.T) {
	expected := &TLSMessage{
		Records: []*Record{{
			ContentType:     23,
			ContentTypeDesc: "Application Data",
			Version:         0x0303,
			VersionDesc:     "TLS 1.2",
			Length:          23,
			data: []byte{
				0x42, 0xe3, 0xf1, 0x65, 0x80, 0x55, 0x3f, 0x84, 0x2e, 0x54,
				0x80, 0xa6, 0xe9, 0x2b, 0x6e, 0xce, 0xdb, 0x0f, 0xb2, 0x53,
				0x2e, 0x5f, 0x3e},
		},
			{
				ContentType:     23,
				ContentTypeDesc: "Application Data",
				Version:         0x0303,
				VersionDesc:     "TLS 1.2",
				Length:          34,
				data: []byte{
					0x44, 0xed, 0x12, 0xf5, 0x5d, 0x28, 0x1e, 0x64, 0xba, 0x28,
					0x39, 0x1a, 0x20, 0x5b, 0xb7, 0x14, 0xff, 0x5c, 0x48, 0x43,
					0x04, 0x0e, 0x50, 0x13, 0xdf, 0x19, 0xff, 0x26, 0x53, 0xbb,
					0x22, 0xbc, 0xd0, 0x7c,
				},
			}},
		Data: []byte{
			0xe5, 0x23, 0x87, 0x66, 0x6d, 0xe7, 0xe7, 0x2e, 0xf5, 0x96,
			0x64, 0x59, 0x5d, 0x90, 0xd0, 0xa3, 0x47, 0x0c, 0x05, 0x0d,
			0x63, 0x48, 0x06, 0x1c, 0x32, 0x05, 0x33, 0x07, 0x99, 0x16,
			0xb8, 0x82, 0x62, 0xa9, 0xab, 0x8a, 0x70, 0x55, 0x35, 0xc6,
			0xb0, 0x1e, 0x08, 0xfc, 0xec, 0xf8, 0xc0, 0x55, 0x62, 0xf7,
			0x6e, 0xb6, 0x98, 0x89, 0xc9, 0x0c, 0xc0, 0xa2, 0xbe, 0x57,
			0xe2, 0x02, 0x38, 0x32, 0xb0, 0xf9, 0x70, 0x08, 0x0d, 0x77,
			0x40, 0xb6, 0x29, 0x5e, 0x98, 0xc4, 0x80, 0x9b, 0xd6, 0x3c,
			0xab, 0xcf, 0xc2, 0xf8, 0xba, 0x7e, 0xc4, 0x76, 0x3b, 0x31,
			0x7f, 0xc4, 0x4d, 0x26, 0xc7, 0x43, 0xf5, 0x0c, 0x6f, 0xc4,
			0xf9, 0x2f, 0xdd, 0x71, 0xe3, 0xee, 0x3c, 0xd7, 0xab, 0x94,
			0xfd, 0xbf, 0xe9, 0x36, 0xf2, 0x16, 0x09, 0xbd, 0xe5, 0xd3,
			0x37, 0x80, 0x51, 0x78, 0x95, 0x47, 0xfd, 0x41, 0x41, 0xa1,
			0x8d, 0x23, 0x27, 0xa7, 0xd2, 0xb8, 0xcf, 0xfa, 0xd8, 0x46,
			0x1a, 0xeb, 0x5b, 0xdf, 0x28, 0x07, 0x36, 0xe5, 0x07, 0xb7,
			0x70, 0xda, 0x06, 0xec, 0x13, 0x3a, 0xd4, 0x4b, 0xdb, 0x13,
			0x2a, 0x39, 0x22, 0x3f, 0x04, 0xdd, 0x87, 0xf4, 0xba, 0x9c,
			0xc5, 0xcd, 0xb9, 0x7d, 0x38, 0x0d, 0x86, 0xa5, 0xab, 0xdf,
			0x2e, 0xa4, 0x51, 0x34, 0xa1, 0xe6, 0x30, 0x45, 0x99, 0x38,
			0xcb, 0xa8, 0x84, 0xf6, 0x15, 0x03, 0x1b, 0x5a, 0xf6, 0xbd,
			0x56, 0xef, 0xbf, 0xc7, 0xbb, 0x18, 0xe4, 0x6a, 0xac, 0xac,
			0xa5, 0xe5, 0xee, 0xed, 0x58, 0x99, 0x83, 0x17, 0x03, 0x03,
			0x00, 0x17, 0x2b, 0x8f, 0xfc, 0xba, 0x61, 0xb4, 0x63, 0x0a,
			0xa6, 0x9a, 0xf4, 0xce, 0x17, 0x1b, 0xa3, 0x20, 0x6e, 0x80,
			0x9f, 0x3d, 0xf7, 0x32, 0x46, 0x17, 0x03, 0x03, 0x00, 0x17,
			0xa5, 0x10, 0x47, 0x96, 0x0e, 0x03, 0x36, 0xb7, 0x84, 0x2c,
			0xa7, 0xc5, 0x4f, 0xbc, 0x52, 0x2e, 0x5c, 0x56, 0x60, 0x72,
			0x05, 0x18, 0x98},
	}

	tls := &TLSMessage{}
	packet, close := testPacket(t, "tls")
	defer close()
	if err := tls.Parse(packet); err != nil {
		t.Fatal(err)
	}
	require.Equal(t, expected, tls)
}
